"""
üé§ Audio Insights - Relat√≥rios Inteligentes
Transcreve √°udios, gera insights e envia relat√≥rio em PDF por e-mail.
Compat√≠vel com uso local e Streamlit Cloud.
"""

# ============================================================
# üîß IMPORTA√á√ïES
# ============================================================
import streamlit as st
import os
import csv
import tempfile
from datetime import datetime
from pathlib import Path
from openai import OpenAI
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak
from reportlab.lib.enums import TA_JUSTIFY, TA_CENTER
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders
# ‚úÖ Compatibilidade entre Python 3.10 e 3.11+
try:
    import tomllib
except ModuleNotFoundError:
    import tomli as tomllib


# ============================================================
# ‚öôÔ∏è CONFIGURA√á√ÉO INICIAL
# ============================================================
st.set_page_config(page_title="Audio Insights", page_icon="üé§", layout="wide")

# üìÇ Diret√≥rios
PASTA_RESULTADOS = Path("resultados")
PASTA_RESULTADOS.mkdir(exist_ok=True)
LOG_FILE = Path("log_usuarios.csv")

# ============================================================
# üîí CARREGAMENTO DE SEGREDOS (Cloud ou Local)
# ============================================================

def carregar_segredos():
    """L√™ credenciais do Streamlit Cloud ou de um arquivo local (.streamlit/secrets.toml)."""
    try:
        # üü¢ Caso esteja no Streamlit Cloud
        openai_key = st.secrets["OPENAI_API_KEY"]
        smtp_email = st.secrets["SMTP_EMAIL"]
        smtp_senha = st.secrets["SMTP_SENHA"]
        smtp_servidor = st.secrets["SMTP_SERVIDOR"]
        smtp_porta = st.secrets["SMTP_PORTA"]
        origem = "Streamlit Cloud"
    except Exception:
        # üü° Fallback local
        try:
            caminho_local = Path(".streamlit/secrets.toml")
            if caminho_local.exists():
                with open(caminho_local, "rb") as f:
                    data = tomllib.load(f)
                openai_key = data.get("OPENAI_API_KEY")
                smtp_email = data.get("SMTP_EMAIL")
                smtp_senha = data.get("SMTP_SENHA")
                smtp_servidor = data.get("SMTP_SERVIDOR", "smtp.gmail.com")
                smtp_porta = data.get("SMTP_PORTA", 587)
                origem = "arquivo local"
            else:
                st.error("‚ùå Nenhum segredo encontrado. Configure no Streamlit Cloud ou crie .streamlit/secrets.toml.")
                st.stop()
        except Exception as e:
            st.error(f"‚ùå Erro ao carregar segredos locais: {e}")
            st.stop()

    return openai_key, smtp_email, smtp_senha, smtp_servidor, smtp_porta, origem


# üîë Carrega segredos automaticamente
OPENAI_API_KEY, SMTP_EMAIL, SMTP_SENHA, SMTP_SERVIDOR, SMTP_PORTA, origem_segredos = carregar_segredos()

# ============================================================
# üîÑ FUN√á√ïES PRINCIPAIS
# ============================================================

def registrar_uso(usuario_nome, usuario_email, arquivo):
    """Registra cada uso do app para controle/cobran√ßa."""
    novo = not LOG_FILE.exists()
    with open(LOG_FILE, "a", newline="", encoding="utf-8") as csvfile:
        writer = csv.writer(csvfile)
        if novo:
            writer.writerow(["Data", "Hora", "Usu√°rio", "Email", "Arquivo"])
        writer.writerow([
            datetime.now().strftime("%d/%m/%Y"),
            datetime.now().strftime("%H:%M:%S"),
            usuario_nome,
            usuario_email,
            arquivo
        ])

def transcrever_audio(audio_file):
    """Transcreve o √°udio com Whisper."""
    import os
    from openai import OpenAI
    os.environ["OPENAI_API_KEY"] = OPENAI_API_KEY
    client = OpenAI()

    with tempfile.NamedTemporaryFile(delete=False, suffix=Path(audio_file.name).suffix) as tmp:
        tmp.write(audio_file.getvalue())
        tmp_path = tmp.name
    with open(tmp_path, "rb") as audio:
        result = client.audio.transcriptions.create(
            model="whisper-1",
            file=audio,
            language="pt"
        )
    os.unlink(tmp_path)
    return result.text

def analisar_com_ia(transcricao):
    """Analisa a transcri√ß√£o com GPT-4."""
    import os
    from openai import OpenAI
    os.environ["OPENAI_API_KEY"] = OPENAI_API_KEY
    client = OpenAI()
    prompt = """
Voc√™ √© um assistente especializado em an√°lise de reuni√µes.
Extraia da transcri√ß√£o:
1. RESUMO EXECUTIVO
2. PARTICIPANTES
3. T√ìPICOS PRINCIPAIS
4. DECIS√ïES TOMADAS
5. A√á√ïES E TAREFAS
6. PONTOS IMPORTANTES
7. PR√ìXIMOS PASSOS
8. OBSERVA√á√ïES
"""
    resp = client.chat.completions.create(
        model="gpt-4-turbo-preview",
        messages=[
            {"role": "system", "content": prompt},
            {"role": "user", "content": transcricao}
        ],
        temperature=0.3
    )
    return resp.choices[0].message.content

def gerar_pdf(nome_arquivo, transcricao, analise, usuario_nome):
    """Cria o PDF do relat√≥rio."""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    pdf_path = PASTA_RESULTADOS / f"relatorio_{usuario_nome}_{timestamp}.pdf"

    doc = SimpleDocTemplate(str(pdf_path), pagesize=A4)
    styles = getSampleStyleSheet()
    normal = ParagraphStyle("Normal", parent=styles["Normal"], fontSize=10, alignment=TA_JUSTIFY)
    title = ParagraphStyle("Title", parent=styles["Heading1"], alignment=TA_CENTER)

    story = [
        Paragraph("üé§ Relat√≥rio de An√°lise de √Åudio", title),
        Spacer(1, 12),
        Paragraph(f"<b>Usu√°rio:</b> {usuario_nome}", normal),
        Paragraph(f"<b>Arquivo:</b> {nome_arquivo}", normal),
        Paragraph(f"<b>Data:</b> {datetime.now().strftime('%d/%m/%Y %H:%M')}", normal),
        Spacer(1, 12),
        Paragraph("<b>üß† An√°lise e Insights</b>", styles["Heading2"]),
        Paragraph(analise.replace("\n", "<br/>"), normal),
        PageBreak(),
        Paragraph("<b>üìù Transcri√ß√£o Completa</b>", styles["Heading2"]),
        Paragraph(transcricao.replace("\n", "<br/>"), normal)
    ]
    doc.build(story)
    return str(pdf_path)

def enviar_email(destinatario, pdf_path, nome_arquivo):
    """Envia o relat√≥rio por e-mail."""
    msg = MIMEMultipart()
    msg["From"] = SMTP_EMAIL
    msg["To"] = destinatario
    msg["Subject"] = f"üìä Relat√≥rio de An√°lise - {nome_arquivo}"

    corpo = f"""
Ol√°!

Segue o relat√≥rio da sua an√°lise de √°udio üéß

Arquivo: {nome_arquivo}
Data: {datetime.now().strftime('%d/%m/%Y %H:%M')}

Atenciosamente,  
Audio Insights üöÄ
"""

    msg.attach(MIMEText(corpo, "plain"))
    with open(pdf_path, "rb") as anexo:
        part = MIMEBase("application", "octet-stream")
        part.set_payload(anexo.read())
        encoders.encode_base64(part)
        part.add_header("Content-Disposition", f"attachment; filename={Path(pdf_path).name}")
        msg.attach(part)

    server = smtplib.SMTP(SMTP_SERVIDOR, SMTP_PORTA)
    server.starttls()
    server.login(SMTP_EMAIL, SMTP_SENHA)
    server.send_message(msg)
    server.quit()

# ============================================================
# üß≠ INTERFACE STREAMLIT
# ============================================================

def main():
    st.title("üé§ Audio Insights - Relat√≥rios Inteligentes")
    st.markdown(f"üîê Rodando com segredos de: **{origem_segredos}**")
    st.divider()

    usuario_nome = st.text_input("üë§ Nome ou ID de Cadastro")
    email_destino = st.text_input("üìß Email para envio do relat√≥rio")
    audio_file = st.file_uploader("üéôÔ∏è Selecione o arquivo de √°udio", type=["mp3", "wav", "m4a", "webm"])

    if st.button("üöÄ Processar e Enviar"):
        if not usuario_nome or not email_destino or not audio_file:
            st.error("‚ùå Preencha todos os campos antes de continuar.")
            return

        with st.spinner("üéß Transcrevendo √°udio..."):
            transcricao = transcrever_audio(audio_file)
            st.success("‚úÖ Transcri√ß√£o conclu√≠da!")

        with st.spinner("üß† Analisando conte√∫do..."):
            analise = analisar_com_ia(transcricao)
            st.success("‚úÖ An√°lise conclu√≠da!")

        with st.spinner("üìÑ Gerando relat√≥rio em PDF..."):
            pdf_path = gerar_pdf(audio_file.name, transcricao, analise, usuario_nome)
            st.success("‚úÖ PDF gerado com sucesso!")

        with st.spinner("üì® Enviando relat√≥rio por e-mail..."):
            enviar_email(email_destino, pdf_path, audio_file.name)
            st.success(f"‚úÖ Relat√≥rio enviado para {email_destino}!")

        registrar_uso(usuario_nome, email_destino, audio_file.name)
        st.balloons()

    st.markdown("---")
    st.caption("Desenvolvido por Clayton Pereira | Powered by OpenAI + Streamlit")


if __name__ == "__main__":
    main()
