"""
Audio Insights - Interface Web com Streamlit
Transcreve √°udios, gera insights e envia PDF por email
"""

# ============================================================
# üîß IMPORTA√á√ïES E CONFIGURA√á√ÉO INICIAL
# ============================================================

import streamlit as st

# ‚öôÔ∏è Configura√ß√£o da p√°gina (DEVE SER a primeira chamada Streamlit)
st.set_page_config(
    page_title="Audio Insights",
    page_icon="üé§",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ============================================================
# üß© IMPORTA√á√ïES PADR√ÉO
# ============================================================

import os
import tempfile
from datetime import datetime
from pathlib import Path
from openai import OpenAI
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak
from reportlab.lib.enums import TA_JUSTIFY, TA_CENTER
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders

# ============================================================
# üìÅ DIRET√ìRIOS PADR√ÉO
# ============================================================

PASTA_TEMP = Path("temp")
PASTA_RESULTADOS = Path("resultados")
PASTA_TEMP.mkdir(exist_ok=True)
PASTA_RESULTADOS.mkdir(exist_ok=True)

# ============================================================
# üîÑ FUN√á√ïES AUXILIARES DE SESS√ÉO
# ============================================================

def inicializar_sessao():
    """Inicializa vari√°veis de sess√£o"""
    if 'processado' not in st.session_state:
        st.session_state.processado = False
    if 'transcricao' not in st.session_state:
        st.session_state.transcricao = ""
    if 'analise' not in st.session_state:
        st.session_state.analise = ""
    if 'pdf_path' not in st.session_state:
        st.session_state.pdf_path = None


# ============================================================
# üéôÔ∏è FUN√á√ÉO DE TRANSCRI√á√ÉO DE √ÅUDIO
# ============================================================

def transcrever_audio(audio_file, api_key: str) -> str:
    """Transcreve √°udio usando Whisper"""
    try:
        client = OpenAI(api_key=api_key)

        # Salva arquivo tempor√°rio
        with tempfile.NamedTemporaryFile(delete=False, suffix=Path(audio_file.name).suffix) as tmp_file:
            tmp_file.write(audio_file.getvalue())
            tmp_path = tmp_file.name

        # Transcreve o √°udio
        with open(tmp_path, "rb") as audio:
            transcription = client.audio.transcriptions.create(
                model="whisper-1",
                file=audio,
                language="pt"
            )

        os.unlink(tmp_path)
        return transcription.text

    except Exception as e:
        st.error(f"‚ùå Erro na transcri√ß√£o: {str(e)}")
        return None


# ============================================================
# üß† FUN√á√ÉO DE AN√ÅLISE COM GPT-4
# ============================================================

def analisar_com_ia(transcricao: str, api_key: str) -> str:
    """Analisa transcri√ß√£o com GPT-4"""
    try:
        client = OpenAI(api_key=api_key)

        prompt_sistema = """
Voc√™ √© um assistente especializado em analisar conversas e reuni√µes.
Analise a transcri√ß√£o fornecida e extraia os seguintes insights estruturados:
1. RESUMO EXECUTIVO
2. PARTICIPANTES
3. T√ìPICOS PRINCIPAIS
4. DECIS√ïES TOMADAS
5. A√á√ïES E TAREFAS
6. PONTOS IMPORTANTES
7. PR√ìXIMOS PASSOS
8. OBSERVA√á√ïES
"""

        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": prompt_sistema},
                {"role": "user", "content": f"Transcri√ß√£o:\n\n{transcricao}"}
            ],
            temperature=0.3
        )

        return response.choices[0].message.content

    except Exception as e:
        st.error(f"‚ùå Erro na an√°lise: {str(e)}")
        return None

# ... (restante das fun√ß√µes gerar_pdf, enviar_email, etc.)

def main():
    """Fun√ß√£o principal da aplica√ß√£o"""
    # toda a interface Streamlit vai aqui:
    # - t√≠tulo
    # - upload de √°udio
    # - inputs de email
    # - bot√£o processar
    # - exibi√ß√£o dos resultados
    pass  # (ou seu conte√∫do completo)

if __name__ == "__main__":
    main()
